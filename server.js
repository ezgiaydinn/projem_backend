const express = require('express');

//const multer = require("multer");
//const path = require("path");
const bodyParser = require('body-parser');
const cors = require('cors');
const router = express.Router();
const app = express();
app.use(cors());
app.use(bodyParser.json());

// MySQL baÄŸlantÄ±sÄ±
const mysql = require('mysql2');
require('dotenv').config(); 

const db = mysql.createConnection({
  host: process.env.DB_HOST,      
  port: process.env.DB_PORT || 3306,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  multipleStatements: true
});


db.connect((err) => {
  if (err) {
    console.error('MySQL baÄŸlantÄ± hatasÄ±:', err);
    return;
  }
  console.log('âœ… MySQL baÄŸlantÄ±sÄ± kuruldu.');
});


// Login Route
app.post('/api/auth/login', (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ error: 'Email ve ÅŸifre zorunludur.' });
  }

  const sql = 'SELECT * FROM users WHERE email = ? AND password = ?';
  db.query(sql, [email, password], (err, results) => {
    if (err) {
      console.error('GiriÅŸ hatasÄ±:', err);
      return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
    }

    if (results.length > 0) {
      // KullanÄ±cÄ± bulunduysa baÅŸarÄ± cevabÄ± dÃ¶n
      return res.status(200).json({
        message: 'GiriÅŸ baÅŸarÄ±lÄ±!',
        user: {
          id: results[0].id,
          name: results[0].name,
          email: results[0].email
        }
      });
    } else {
      // KullanÄ±cÄ± bulunamadÄ±ysa hata dÃ¶n
      return res.status(401).json({ error: 'GeÃ§ersiz email veya ÅŸifre.' });
    }
  });
});

// Signup Route
app.post('/api/auth/signup', (req, res) => {
  const { name, email, password } = req.body;

  if (!name || !email || !password) {
    return res.status(400).json({ error: 'Ad, e-posta ve ÅŸifre zorunludur.' });
  }

  // Ã–nce aynÄ± email var mÄ± kontrol et
  const checkUserSql = 'SELECT * FROM users WHERE email = ?';
  db.query(checkUserSql, [email], (err, results) => {
    if (err) {
      console.error('KullanÄ±cÄ± kontrol hatasÄ±:', err);
      return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
    }

    if (results.length > 0) {
      // AynÄ± email zaten kayÄ±tlÄ±ysa hata dÃ¶ndÃ¼r
      return res.status(409).json({ error: 'Bu e-posta zaten kullanÄ±lÄ±yor.' });
    }

    // Email kullanÄ±lmÄ±yorsa yeni kullanÄ±cÄ± ekle
    const insertUserSql = 'INSERT INTO users (name, email, password) VALUES (?, ?, ?)';
    db.query(insertUserSql, [name, email, password], (err, result) => {
      if (err) {
        console.error('KayÄ±t hatasÄ±:', err);
        return res.status(500).json({ error: 'KayÄ±t yapÄ±lamadÄ±.' });
      }
      return res.status(201).json({ message: 'KullanÄ±cÄ± baÅŸarÄ±yla kaydedildi.' });
    });
  });
});
// server.js

app.get('/api/favorites/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const sql = `
      SELECT 
        b.id,
        b.title,
        b.authors,
        b.description,
        b.thumbnail_url   AS thumbnailUrl,
        b.published_year  AS publishedYear,
        b.genre,
        b.page_count      AS pageCount,
        b.language
      FROM favorites f
      JOIN books b ON f.book_id = b.id
      WHERE f.user_id = ?
      ORDER BY f.created_at DESC
    `;
    const [rows] = await db.promise().query(sql, [userId]);

    const result = rows.map(r => {
      // Saf JS: Ã¶nce JSON.parse dene, baÅŸarÄ±sÄ±zsa virgÃ¼lle ayÄ±r ve boÅŸlarÄ± at
      let authorsList = [];
      if (r.authors) {
        try {
          authorsList = JSON.parse(r.authors);
        } catch (_) {
          authorsList = r.authors
            .split(',')
            .map(s => s.trim())
            .filter(s => s.length > 0);
        }
      }

      return {
        id: r.id,
        title: r.title,
        authors: authorsList,
        description: r.description,
        thumbnailUrl: r.thumbnailUrl,
        publishedYear: r.publishedYear,
        genre: r.genre,
        pageCount: r.pageCount,
        language: r.language,
      };
    });

    return res.json(result);
  } catch (err) {
    console.error('ðŸš¨ GET /api/favorites error:', err);
    return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
  }
});

// KullanÄ±cÄ±nÄ±n favori kitaplarÄ±nÄ± dÃ¶ner
//  app.get('/api/favorites/:userId', async (req, res) => {
//    const { userId } = req.params;
//    const sql = `
//      SELECT b.*
//      FROM favorites f
//      JOIN books b ON f.book_id = b.id
//      WHERE f.user_id = ?
//    `;
//    db.promise().query(sql, [userId])
//      .then(([rows]) => res.json(rows))
//      .catch(err => {
//        console.error('Favorites Ã§ekme hatasÄ±:', err);
//        res.status(500).json({ error: 'VeritabanÄ± hatasÄ±.' });
//      });
//  });

// app.get('/api/favorites/:userId', async (req, res) => {
//   const { userId } = req.params;
//   try {
//     const [rows] = await db.query(
//       `SELECT
//          b.id,
//          b.title,
//          b.authors,
//          b.description,
//          b.thumbnail_url  AS thumbnailUrl,
//          b.published_date AS publishedDate,
//          b.page_count     AS pageCount,
//          b.publisher
//        FROM favorites f
//        JOIN books b ON f.book_id = b.id
//        WHERE f.user_id = ?`,
//       [userId]
//     );
//     return res.json(rows);
//   } catch (err) {
//     console.error('Favori Ã§ekme hatasÄ±:', err);
//     return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
//   }
// });

// KullanÄ±cÄ±nÄ±n puan verilerini dÃ¶ner
app.get('/api/ratings/:userId', async (req, res) => {
  const { userId } = req.params;
  const sql = `
    SELECT b.*, r.rating
    FROM ratings r
    JOIN books b ON r.book_id = b.id
    WHERE r.user_id = ?
  `;
  db.promise().query(sql, [userId])
    .then(([rows]) => res.json(rows))
    .catch(err => {
      console.error('Ratings Ã§ekme hatasÄ±:', err);
      res.status(500).json({ error: 'VeritabanÄ± hatasÄ±.' });
    });
});


// Profile Route
app.get('/api/auth/profile/:userId', (req, res) => {
  const { userId } = req.params;

  const sql = 'SELECT id, name, email FROM users WHERE id = ?';

  db.query(sql, [userId], (err, results) => {
    if (err) {
      console.error('Profil Ã§ekme hatasÄ±:', err);
      return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
    }

    if (results.length > 0) {
      // KullanÄ±cÄ± bulundu
      const user = results[0];
      return res.status(200).json({ user });
    } else {
      // KullanÄ±cÄ± bulunamadÄ±
      return res.status(404).json({ error: 'KullanÄ±cÄ± bulunamadÄ±.' });
    }
  });
});

// update profil route
app.put('/api/auth/updateProfile', (req, res) => {
  const { userId, field, value } = req.body;

  if (!userId || !field || !value) {
    return res.status(400).json({ error: 'Eksik veri gÃ¶nderildi.' });
  }

  const allowedFields = ['name', 'email', 'password'];
  if (!allowedFields.includes(field)) {
    return res.status(400).json({ error: 'GÃ¼ncellenmesi yasak bir alan seÃ§ildi.' });
  }

  const sql = `UPDATE users SET ${field} = ? WHERE id = ?`;
  db.query(sql, [value, userId], (err, result) => {
    if (err) {
      console.error('Bilgi gÃ¼ncelleme hatasÄ±:', err);
      return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
    }
    return res.status(200).json({ message: 'Profil baÅŸarÄ±yla gÃ¼ncellendi.' });
  });
});

const multer = require('multer');
const path = require('path');

// FotoÄŸraf yÃ¼klemek iÃ§in multer ayarlarÄ±
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // uploads klasÃ¶rÃ¼ne kaydedilecek
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  }
});
const upload = multer({ storage: storage });

// upload profil image
app.post('/api/auth/uploadProfileImage', upload.single('image'), (req, res) => {
  const { userId } = req.body;
  const imagePath = req.file.path;

  if (!userId || !req.file) {
    return res.status(400).json({ error: 'Eksik veri veya dosya gÃ¶nderildi.' });
  }

  const sql = 'UPDATE users SET profile_image = ? WHERE id = ?';
  db.query(sql, [imagePath, userId], (err, result) => {
    if (err) {
      console.error('Profil fotoÄŸrafÄ± yÃ¼kleme hatasÄ±:', err);
      return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
    }
    return res.status(200).json({ message: 'Profil fotoÄŸrafÄ± gÃ¼ncellendi.' });
  });
});

// server.js iÃ§inde veya ayrÄ± routes/favorites.js
app.post('/api/favorites/save', async (req, res) => {
  try {
    const {
      userId,
      bookId,
      title,            
      author,           
      thumbnailUrl      
    } = req.body;

    if (!userId || !bookId || !title) {
      return res.status(400).json({ error: 'Eksik parametreler.' });
    }

    // 1) Kitap daha Ã¶nce favorites yoksa ekle, varsa gÃ¼ncelle
    const sql = `
      INSERT INTO favorites (user_id, book_id, title, author, thumbnail_url)
      VALUES (?, ?, ?, ?, ?)
      ON DUPLICATE KEY UPDATE
        title = VALUES(title),
        author = VALUES(author),
        thumbnail_url = VALUES(thumbnail_url),
        created_at = CURRENT_TIMESTAMP
    `;

    await db.promise().query(sql, [
      userId,
      bookId,
      title,
      author,
      thumbnailUrl,
    ]);

    return res.json({ message: 'Favori kaydedildi.' });
  } catch (err) {
    console.error('Favori kaydederken hata:', err);
    return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
  }
});


  // =========================================================
//  FAVORÄ° KÄ°TAP KAYDET  â€”  /api/favorites/save
// =========================================================
// app.post('/api/favorites/save', async (req, res) => {
//   const {
//     userId,
//     bookId,
//     title,
//     authors,
//     thumbnailUrl,
//     publishedDate,
//     pageCount,
//     publisher,
//     description
//   } = req.body;

//   if (!userId || !bookId || !title) {
//     return res.status(400).json({ error: 'userId, bookId, title zorunlu.' });
//   }

//   try {
//     /* 1) KitabÄ± books tablosuna ekle (yoksa) */
//     await db.promise().query(
//       `INSERT IGNORE INTO books
//        (id, title, authors, thumbnail_url, published_year, page_count, description)
//        VALUES (?, ?, ?, ?, ?, ?, ?)`,
//       [
//         bookId,
//         title,
//         JSON.stringify(authors),      // authors dizisini stringle
//         thumbnailUrl,
//         publishedDate,
//         pageCount,
//         description
//       ]
//     );

//     /* 2) Favori kaydÄ±nÄ± favorites tablosuna ekle */
//     await db.promise().query(
//       `INSERT IGNORE INTO favorites (user_id, book_id)
//        VALUES (?, ?)`,
//       [userId, bookId]
//     );

//     return res.json({ message: 'Favori kitap baÅŸarÄ±yla kaydedildi.' });
//   } catch (err) {
//     console.error('Favori kaydetme hatasÄ±:', err);
//     return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
//   }
// });

// =========================================================
//  PUAN KAYDET / GÃœNCELLE   â€”  POST /api/ratings/save
// =========================================================
app.post('/api/ratings/save', async (req, res) => {
  const {
    userId,
    bookId,
    rating,           // 1-5 arasÄ±
    // â€” opsiyonel kitap bilgisi (title, authors â€¦) â€”
    title,
    authors,
    thumbnailUrl,
    publishedDate,
    pageCount,
    publisher,
    description
  } = req.body;

  if (!userId || !bookId || !rating) {
    return res.status(400).json({ error: 'userId, bookId, rating zorunlu.' });
  }
  if (rating < 1 || rating > 5) {
    return res.status(400).json({ error: 'rating 1-5 aralÄ±ÄŸÄ±nda olmalÄ±.' });
  }

  try {
    /* 1) Kitap DBâ€™de yoksa ekle (opsiyonel alanlar varsa) */
    await db.promise().query(
      `INSERT IGNORE INTO books
       (id, title, authors, thumbnail_url, published_year, page_count, description)
       VALUES (?, ?, ?, ?, ?, ?, ?)`,
      [
        bookId,
        title ?? '',
        authors ? JSON.stringify(authors) : '',
        thumbnailUrl ?? '',
        publishedDate ?? null,
        pageCount ?? null,
        description ?? ''
      ]
    );

    /* 2) ratings tablosuna ekle / gÃ¼ncelle */
    await db.promise().query(
      `INSERT INTO ratings (user_id, book_id, rating)
       VALUES (?, ?, ?)
       ON DUPLICATE KEY UPDATE rating = VALUES(rating), updated_at = CURRENT_TIMESTAMP`,
      [userId, bookId, rating]
    );

    res.json({ message: 'Puan kaydedildi.' });
  } catch (err) {
    console.error('Puan kaydetme hatasÄ±:', err);
    res.status(500).json({ error: 'Sunucu hatasÄ±.' });
  }
});

// server.js (veya routes/library.js)

// app.post('/api/library/add', async (req, res) => {
//   try {
//     const {
//       userId,
//       bookId,
//       title,
//       authors,        // dizi ÅŸeklinde ["Yazar1","Yazar2"]
//       thumbnailUrl,
//       publisher,
//       publishedDate,
//       pageCount,
//       description
//     } = req.body;

//     if (!userId || !bookId || !title) {
//       return res.status(400).json({ error: 'userId, bookId ve title zorunlu.' });
//     }

//     // 1) librarys tablosuna kaydet (yoksa ekle / varsa gÃ¼ncelle)
//     const sql = `
//       INSERT INTO librarys 
//         (user_id, book_id, title, authors, thumbnail_url, publisher, published_date, page_count, description)
//       VALUES 
//         (?, ?, ?, ?, ?, ?, ?, ?, ?)
//       ON DUPLICATE KEY UPDATE
//         title = VALUES(title),
//         authors = VALUES(authors),
//         thumbnail_url = VALUES(thumbnail_url),
//         publisher = VALUES(publisher),
//         published_date = VALUES(published_date),
//         page_count = VALUES(page_count),
//         description = VALUES(description),
//         added_at = CURRENT_TIMESTAMP
//     `;

//     // authors dizisini virgÃ¼lle birleÅŸtirelim
//     const authorsStr = Array.isArray(authors) ? authors.join(', ') : authors;

//     await db.promise().query(sql, [
//       userId,
//       bookId,
//       title,
//       authorsStr,
//       thumbnailUrl,
//       publisher,
//       publishedDate,
//       pageCount,
//       description,
//     ]);

//     return res.status(200).json({ message: 'Kitap kÃ¼tÃ¼phaneye eklendi.' });
//   } catch (err) {
//     console.error('KÃ¼tÃ¼phane ekleme hatasÄ±:', err);
//     return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
//   }
// });


// GET /api/library/:userId
app.get('/api/library/:userId', async (req, res) => {
  const { userId } = req.params;
  try {
    const [rows] = await db.promise().query(
      'SELECT b.* FROM books b JOIN librarys l ON b.id = l.book_id WHERE l.user_id = ?',
      [userId]
    );
    return res.json(rows); // rows: [{ id, title, authors, thumbnail_url, â€¦ }, â€¦]
  } catch (err) {
    console.error(err);
    return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
  }
});
// KÃ¼tÃ¼phaneden kitap Ã§Ä±karmak iÃ§in endpoint
app.post('/api/library/remove', async (req, res) => {
  try {
    const { userId, bookId } = req.body;

    // Gerekli parametreler var mÄ± kontrolÃ¼
    if (!userId || !bookId) {
      return res.status(400).json({ error: 'userId ve bookId gerekli.' });
    }

    // library tablosundan silme sorgusu
    const deleteSql = `
      DELETE FROM librarys
      WHERE user_id = ? AND book_id = ?
    `;
    const [result] = await db.promise().query(deleteSql, [userId, bookId]);

    // etkilenen satÄ±r yoksa 404 dÃ¶nebilirsin, ama biz 200 ile dÃ¶nÃ¼yoruz
    return res.status(200).json({ message: 'Kitap kÃ¼tÃ¼phaneden Ã§Ä±karÄ±ldÄ±.' });
  } catch (err) {
    console.error('KÃ¼tÃ¼phaneden Ã§Ä±karma hatasÄ±:', err);
    return res.status(500).json({ error: 'Sunucu hatasÄ±.' });
  }
});


app.post('/api/favorite-to-library', async (req, res) => {
  try {
    const { userId, bookId } = req.body;
    if (!userId || !bookId) {
      return res.status(400).json({ error: 'userId ve bookId gerekli.' });
    }

    // 1) librarys tablosuna ekle (yoksa gÃ¼ncelle):
    const insertLibSql = `
      INSERT INTO librarys (user_id, book_id, title)
      SELECT ?, b.id, b.title
      FROM books b
      WHERE b.id = ?
      ON DUPLICATE KEY UPDATE added_at = CURRENT_TIMESTAMP
    `;
    await db.promise().query(insertLibSql, [ userId, bookId ]);

    // 2) favorites tablosundan sil
    const deleteFavSql = `
      DELETE FROM favorites
      WHERE user_id = ? AND book_id = ?
    `;
    await db.promise().query(deleteFavSql, [ userId, bookId ]);

    return res.status(200).json({ message: 'Kitap kÃ¼tÃ¼phaneye taÅŸÄ±ndÄ±.' });
  } catch (err) {
    console.error('ðŸ”´ Favoriyi kÃ¼tÃ¼phaneye taÅŸÄ±ma hatasÄ±:', err);
    return res.status(500).json({ error: 'Sunucu hatasÄ±.', detail: err.message });
  }
});



// // Server baÅŸlat
 const PORT = 3000;
 app.listen(PORT,'0.0.0.0', () => {
 console.log(`ðŸš€ Sunucu ${PORT} portunda Ã§alÄ±ÅŸÄ±yor`);
 });
